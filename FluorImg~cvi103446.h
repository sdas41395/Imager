// FluorImg.h : main header file for the FluorImg application
/***************
*  Contents
*	structs:
*		CFluorImgApp - main struct that serves as global container for other structs
*				Notes:
*					1. Should contain all other structs and be the only struct referenced as global
*					2.
*		BPControl
*		RAControl
*		BAControl
*		Calibration
*		Experiment
*		CExperimentData
*		Bild
*		B16_HEADER
*		
*
****************/


#define HEADERLEN 128
#define MAX_IMAGES 25
#include <NIDAQmx.h>
#include <nivision.h>


/**********************
*  BPControl: Blue Pulse Control struct
* 	Variables associated with BP (aka measuring pulse)
*/
typedef struct BPControl
{
	
	// Pulse that triggers camera (20 usec) to pco.power - taskHandle3
	int iCamTrigInitDelay;
	int iCamTrigLowTime;
	int iCamTrigHighTime;
	
	//Blue Pulse Timing Configurations (taskHandle1)   0.00004,0.0005,0.000600
	int iBP_InitDelay;
	int iBP_Low;
	int iBP_High;
	
	//Camera exposure time must be less than BP high time 
	// int BPCamLow;
	// int BPCamHigh;
	int ExposureTime;
	
	// Setting Blue Intensity   
	double BP_Voltage;
	double BP_Current;
	double BP_V_LB;		// BP voltage lower bound
	double BP_V_HB;		// BP voltage high bound
	double BP_I_LB;		// BP current lower bound
	double BP_I_HB;		// BP current high bound
	
	int flag; //used for bp on and bp off button 
	TaskHandle	taskHandleForBPOn //also used for bp on and bp off
	

} BPControl;


/**********************
*  RAControl: Red Actinic Control struct
* 	Variables associated with RA (aka red actinic light)
*/
typedef struct RAControl
{
	// Timing
	int iRA_InitDelay;
	int iRA_Low;
	int iRA_High;
	
	int NumberOfPictures;
	
	// Power
	double RA_Current;
	double RA_Voltage;
	double RA_I_LB;			// RA Current lower bound
	double RA_I_HB;			// RA Current high bound
	double RA_V_LB;			// RA Voltage lower bound
	double RA_V_HB;			// RA Voltage high bound

	int flag_RP; //used for the rp on and rp off function.
	TaskHandle	taskHandleForRAOn //used for rp on and rp off
	
	
} RAControl;

/**********************
*  BAControl: Blue Actinic Control struct
* 	Variables associated with BA (aka blue actinic light)
*/
typedef struct BAControl
{
	// Timing
	int iBA_InitDelay;
	int iBA_Low;
	int iBA_High;
	
	// Power
	double BA_Current;
	double BA_Voltage;
	double BA_V_LB;		// BA voltage lower bound
	double BA_V_HB;		// BA voltage high bound 

	TaskHandle	taskHandleForRAOn //used for rp on and rp off 
	
}BAControl;


// Reason for struct is not clear
typedef struct Experiment
{
	BPControl expControl;
	
}Experiment;

typedef struct FI_Image
{
	// raw image data
	unsigned short 	*meta_image;
	// char 			*Image_PathName;
	char			Image_PathName[256];
	char 			TimeStamp[100];
	int 			intensity;
	int			 	iPicCnt; 			//Counter stamp generated by cam during experiment (int)
	int 			iYear;
	int 			iMonth;
	int				iDay;
	int				iHour;
	int				iMin;
	int				iuSec;
				
	
	HistogramReport *histogram_report;
	
} FI_Image;

/**********
* CExerimentData
*	Store experiment data
*
*/
typedef struct CExperimentData
{ 

	FI_Image* images[20];  //pointer to array of FI_Image structs
	int CExperimentDataCount;  //Keeps track of how many cam_pictures are called.
	
	//Old variables from first version
	int m_nEventType;  
	int m_nMacroStep;
	int m_nRedIntensity;
	int m_nBlueIntensity;
	int m_nMeasPulseIntensity;
	int m_nTimeDelay;
	int m_nSaturationTime;
	int m_nMeasDelay;
	int m_nMeasPulseWidth;
	int recordON 
	
} CExperimentData;



typedef struct Bild
{
  WORD *pic12;                         // original image pointer
  SYSTEMTIME sTime;                    // shows the exact time stamp of the image  // 20 byte
  int        iTicks;                   // milliseconds gone after start in stime
  int        iXRes;                    // X Resolution
  int        iYRes;                    // Y Resolution                             // 32 byte
  char 		cText[40];                 // text which should be placed inside the image// 72 byte
  int       bDouble;                  // shows if pic is Doubleshutter image
  int       bDummy[3];                // since bool is only one byte, we've to fill up to four bytes// 76 byte
  int        iBWMin;                   // Lut bw min                               // 80 byte
  int        iBWMax;                   // Lut bw max
  int        iBWLut;                   // Lut lin log
  int        iRMin;                    // red min                                  // 92 byte
  int        iRMax;                    // red max
  int        iGMin;                    // green min                                // 100 byte
  int        iGMax;                    // green max
  int        iBMin;                    // blue min
  int        iBMax;                    // blue max                                 // 112 byte
  int        iColLut;                  // Lut lin log color
  int        iColor;                   // image from Color-CCD: 1 otherwise 0      // 120 byte
  int        iVersion;                 // Version of b16 extended info
  int        iBWMin2;                   // Lut bw min
  int        iBWMax2;                   // Lut bw max                              // 132 byte
  int        iBWLut2;                   // Lut lin log
  int        iRMin2;                    // red min                                 // 140 byte
  int        iRMax2;                    // red max
  int        iGMin2;                    // green min
  int        iGMax2;                    // green max                               // 152 byte
  int        iBMin2;                    // blue min
  int        iBMax2;                    // blue max                                // 160 byte
  int        iColLut2;                  // Lut lin log color
  int        bAlignUpper;               // Align MSB (0-MSB is bit14, 1-MSB is bit 16)
  int        bDummy2[3];                // since bool is only one byte, we've to fill up to four bytes // 168 byte
  double     dGammaLut;                 // Gamma value b/w
  double     dGammaLutC;                // Gamma value color
  double     dGammaLut2;                // Gamma value b/w 2
  double     dGammaLutC2;               // Gamma value color 2                     // 200 byte
  int        iColorPatternType;         // Demosaicking type for the color pattern
  int        iBitRes;                   // Bit resolution of image                 // 208 byte
  double     dSaturation;               // Color saturation common for both ds images // 216 byte
} Bild;// ACHTUNG: noch 172 Bytes frei, sonst muss headerlen in file12 angepasst werden!
//   Headerlen         = 512
// - alter Header      = 128
// - Bild (ohne WORD*) = 212
// ergibt freie bytes  = 172

typedef struct B16_HEADER
{
  char ucPco[4];
  unsigned int uiFileLen;
  unsigned int uiHeaderLen;
  unsigned int uiXRes;
  unsigned int uiYRes;
  unsigned int uiLutSign;
  unsigned int uiColor;
  unsigned int uiBWMin;
  unsigned int uiBWMax;
  unsigned int uiBWLut;
  unsigned int uiRMin;
  unsigned int uiRMax;
  unsigned int uiGMin;
  unsigned int uiGMax;
  unsigned int uiBMin;
  unsigned int uiBMax;
  unsigned int uiColLut;
  unsigned int uiDS;
  unsigned int uiDummy[HEADERLEN-18];
}B16_HEADER;

typedef struct Calibration
{
	BPControl calBPControl;
	RAControl calRAControl;
	BAControl calBAControl;
	
	//Triggering Pulse Configurations (gTaskhandle Dev2/Ctr0)  
	int iTrigInitDelay;
	int iTrigLow;
	int iTrigHigh;
	
	//Panel Handles
	int hCalibration; 
	int hParent;
	int g_hchild2;
	int hplotpanel; 
	
	//Camera Recording state
	unsigned short recstate;
	
	//flag for writing to table on experiment page 1 image only
	int image_table_flag;
		
}Calibration;

typedef struct CFluorImgApp
{
	// Varialbes added and used in Labwindows CVI after 11/2015   
	Calibration appCal;
	
	//Flag and appdata for image array
	CExperimentData *appData; //only processes one image
	//Next 5 are for the array 
	CExperimentData *CExperimentData_Array[5];
	
	
	int flag;
	Bild appBild;
	
	DWORD dwValidImageCnt;
	DWORD dwMaxImageCnt;
	
	// Panel handles 
	int hCalibration;	// Calibration Panel handle
	int hCalibrationEx;	// Extra Calibration Panel handle
	int hPlotPanel;
	int hExperiment;	// Experiment Panel handle
	int hControl;   	// Control Panel handle
	
	// Path name for file that generated pictures will be saved to
	char picPathName[MAX_PATHNAME_LEN];
	
	//Varialbles for displaying images on Experiment pane
	int idGraph;
	int idCanvas;
	int hTabPanel1;
	int hTabPanel2;
	
	//Variables for storing photodiode constants
	double Rohm,LiCorCal,PARConst;
	

	/**************************************/
	//Old stuff
	char m_cTimerBoard;
	char m_cDABoard;

	WORD	wXResAct, wYResAct, wXResMax, wYResMax;
	WORD	wActSeg;
	WORD	wBinHorz, wBinVert;
	WORD	wRoiX0,wRoiY0,wRoiX1,wRoiY1;
	SHORT	sBufNr;
	SHORT	wBufferNr;
	WORD	*wBuf;    //wBuf[0....size] represents the image data
	WORD	* data;
	DWORD	size,newsize;
	HANDLE 	hEvent;
	HANDLE 	hCam;
	PCO_Description strDescription;

	// HANDLE m_hEventKillCameraImageThread;

	// bool m_bRedActinicFET;
	// bool m_bRedActinicPS;
	// bool m_bRedActinicOnOff;
	int m_nRedActinicIntensity;
	// bool m_bBlueActinicFET;
	// bool m_bBlueActinicOnOff;
	int m_nBlueActinicIntensity;
	// bool m_bBluePulseFET;
	// bool m_bBluePulsePS;
	int m_nBluePulseIntensity;
	int m_nCameraExposure;
	int m_nWhiteIntensity;
	int m_nBlueGFPIntensity;

	double m_dRedActinicVoltage[41];
	double m_dBlueActinicVoltage[41];
	double m_dBlueGFPVoltage[21];

	int m_nRedActinicOffset;
	int m_nRedActinicStep;
	int m_nBlueActinicOffset;
	int m_nBlueActinicStep;
	int m_nBlueGFPOffset;
	int m_nBlueGFPStep;

	int m_nCurrentStep;
	int m_nCurrentRepetition;

	int m_nCurrentRedIntensity;
	int m_nCurrentBlueIntensity;
	
	
}CFluorImgApp;


	// bool m_bFmSequence;

	//void ExecuteExperiment(CStringArray* staMacro, CExperimentView* pView);
	//void ParseEvent(CString strEvent, int nStep);
	//void ResetStates();

//// Overrides
//public:
//	virtual bool InitInstance();
//
//// Implementation
//	afx_msg void OnAppAbout();
//	DECLARE_MESSAGE_MAP()
// };

//extern CFluorImgApp theApp;
//
//void FillLogFont(LOGFONT& logFont, LPCTSTR lpszFontString);
//
//UINT ExecuteExperimentThread(LPVOID pParam);
//void RunSequence(int nRedIntensity,	int nBlueIntensity,	int nMeasPulseIntensity, 
//				 int nSaturationTime, int nMeasDelay, int nMeasPulseWidth);
//void SetRedActinicIntensity(int nValue);
//void SetBlueActinicIntensity(int nValue);
//void EnableBlueActinic(bool bState);
//void SetBluePulseIntensity(int nValue);
//void SetWhiteIntensity(int nValue);
//void SetBlueGFP(int nValue);
//void RedActinicOnOff(bool bState);
//void BlueActinicOnOff(bool bState);
//
//void EnableRedActinicFET(bool bState);
//void EnableRedActinicPSOutput(bool bState);
//void EnableBluePulseFET(bool bState);
//void EnableBluePulsePSOutput(BOOL bState);
//
//void SetupCamera();
//void CloseCamera();
//void SetCameraExposure(int nExposureTime);
//
//UINT CameraImageThread(LPVOID pParam);
//int store_b16(char *filename, int width, int height, void *buf);
//
//double GetRedActinicVoltage(int nValue);
//double GetBlueActinicVoltage(int nValue);
//double GetBlueGFPVoltage(int nValue);								    
//
//void EncodePassword(CString &str);
//void DecodePassword(CString &str);
//void GentyHA();


/************************************
* Commented out statements from original FluorImg App

//#pragma once
//
//#ifndef __AFXWIN_H__
//	#error include 'stdafx.h' before including this file for PCH
//#endif
//
//#include "resource.h"       // main symbols
//#include "ExperimentView.h"
//
//#include "nidaq.h"
//#include "nidaqex.h"
//
//#include "CameraFunctions.h"

// CFluorImgApp:
// See FluorImg.cpp for the implementation of this class
//

// #define WM_USER_EXPERIMENT_STEP			WM_USER + 210

	// m_nEventType
	// 1 = Delay
	// 2 = Intensity Change
	// 3 = Sequence 
	// 10 = Red Actinic Intensity
	// 11 = Blue Actinic Intensity
	// 12 = Blue Pulse Intensity
	// 13 = Red Actinic State (FET)
	// 14 = Blue Actinic State (FET)
	// 15 = Blue Pulse State (FET)
	// 16 = Red Actinic Power Supply Output State
	// 17 = Blue Pulse Power Supply Output State
	// 18 = Red Actinic On/Off
	// 19 = Blue Actinic On/Off
	// 30 = Camera Exposure Time
	// 50 = Blue GFP Intensity
	// 60 = Find true Fm

	// CFluorImgApp();
	// HANDLE m_hEventKillExperimentThread;
	// bool m_bExperimentRunning;
	// CExperimentView* m_pExperimentView;
	// CObArray m_aExperiment;
	// CObArray m_aFmImages;


//class CIPPBuffer : public CObject
//{
//public:
//	unsigned short *pBuffer;
//	int iIntensity;
//};


// bool m_bEnabled;

*****/

//From temp external 
//--------------------------------------------------------------------------------------------------------------------------
extern CFluorImgApp myApp;
 


int CVICALLBACK GenerateCallbackVoltageandCurrent (int panel, int control, int event,
							void *callbackData, int eventData1, int eventData2);

int CVICALLBACK GenerateCallbackExposure(int panel, int control, int event, void *callbackData, int eventData1, int eventData2);

int32 CVICALLBACK DoneCallback(TaskHandle taskHandle, int32 status, void *callbackData);   


int FindExposure(void);

int		OpenFile_(Calibration myCal);  
int		SaveFile_();
void	ReadFromPowerSupply(void);
void	histogram(Image* image, float min, float max, Image* mask, int numClasses);
int 	DisplayAndSaveImageData();
void	image_display_func();
int 	RA_Scan_IFn(double min, double max);
int 	AO_RAV_I_Fn(double v_RA, double i_RA);
int 	Acquire(float64 rate,uInt32 sampsPerChan,TaskHandle *taskHandleAcq);
int 	MallocData(DWORD size); //mallocing data for image array 


char max_char(int a, int b, int c);
int max_int(int a, int b, int c)   ;
int matrix_read(char *substitution_Matrix)  ;
int Nowrin_Function(char first_FASTA[760], char second_FASTA[760]);
int Shoham_function3(void) ;


// extern DAQmxErrChk(functionCall)





